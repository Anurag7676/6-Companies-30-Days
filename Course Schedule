class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
     
        // use topo as for directed acyclic we will return true here
        //if topo not come we can't as it is cyclic

        vector<int>adj[numCourses];
        int edges= prerequisites.size();
        for(int i = 0;i<edges;i++)
        {   
            int u = prerequisites[i][0];
            int v = prerequisites[i][1];
            adj[v].push_back(u);
        }
        
    vector<int>indegree(numCourses,0);
        
        for(int i=0; i<numCourses; i++){
            for(auto it : adj[i])
                indegree[it]++;
        }
        
        queue<int>q;
        for(int i=0;i<numCourses;i++)
        {
            if(indegree[i]==0)
            {
                q.push(i);
            }
            
        }
    
    int count=0;
    while(!q.empty())
    {
        
        auto front= q.front();
        q.pop();
        count++;    
        for(auto neigh: adj[front])
        {
            indegree[neigh]--;
            if(indegree[neigh]==0)
            {
                q.push(neigh);
            }
        }
        
        
        
    }
        
    if(count==numCourses)
    {
        return true;
    }
    
  return false;
        
        
        
        
        
        
        
        
    }
};
